import { IAppEvents } from '../../types';

export type EventName = keyof IAppEvents;
export type EventCallback<T> = (payload: T) => void;

export interface IEvents {
    on<K extends EventName>(event: K, callback: EventCallback<IAppEvents[K]>): void;
    emit<K extends EventName>(event: K, payload: IAppEvents[K]): void;
    off<K extends EventName>(event: K, callback: EventCallback<IAppEvents[K]>): void;
}

export class EventEmitter implements IEvents {
    private listeners = {} as Partial<Record<EventName, Set<EventCallback<any>>>>;

    public on<K extends EventName>(event: K, callback: EventCallback<IAppEvents[K]>): void {
        if (!this.listeners[event]) {
            this.listeners[event] = new Set();
        }
        (this.listeners[event] as Set<EventCallback<IAppEvents[K]>>).add(callback);
    }

    public emit<K extends EventName>(event: K, payload: IAppEvents[K]): void {
        (this.listeners[event] as Set<EventCallback<IAppEvents[K]>>)?.forEach((cb) => cb(payload));
    }

    public off<K extends EventName>(event: K, callback: EventCallback<IAppEvents[K]>): void {
        (this.listeners[event] as Set<EventCallback<IAppEvents[K]>>)?.delete(callback);
    }
}

import { EventEmitter } from '../components/base/events';
import { UUID, IProductItem } from '../types';

interface BasketChangedPayload {
  items: IProductItem[];
  total: number;
}

export class BasketService {
  private basket: UUID[] = [];
  private catalog: IProductItem[] = [];

  constructor(private events: EventEmitter) {}

  public init(): void {
    console.log('[BasketService] init — subscribing to basket:add');
    this.loadFromStorage();

    this.events.on<'basket:add'>('basket:add', ({ id }) => {
      console.log(`[BasketService] basket:add received — id: ${id}`);
      this.basket.push(id);
      this.update();
    });

    this.events.on<'basket:remove'>('basket:remove', ({ id }) => {
      this.basket = this.basket.filter(itemId => itemId !== id);
      this.update();
    });

    this.events.on<'basket:status'>('basket:status', () => {
      this.update();
    });
  }

  private loadFromStorage(): void {
    const data = localStorage.getItem('basket');
    if (data) {
      try {
        const parsed = JSON.parse(data);
        if (Array.isArray(parsed)) {
          this.basket = parsed;
          this.updateCounter();
        }
      } catch (e) {
        console.warn('Failed to parse basket from storage', e);
      }
    }
  }

  private saveToStorage(): void {
    localStorage.setItem('basket', JSON.stringify(this.basket));
  }

  private updateCounter(): void {
    const counter = document.querySelector('.header__basket-counter');
    if (counter) counter.textContent = String(this.basket.length);
  }

  private emitBasketChanged(): void {
    const items = this.getItems();
    const total = items.reduce((sum, item) => sum + (item.price ?? 0), 0);

    const payload: BasketChangedPayload = {
      items,
      total,
    };

    console.log('[BasketService] emitBasketChanged', payload);
    this.events.emit('basket:changed', payload);
  }

  private update(): void {
    this.saveToStorage();
    console.log('[BasketService] update: emitting basket:changed');
    this.emitBasketChanged();
    this.updateCounter();
  }

  public setCatalog(catalog: IProductItem[]): void {
    this.catalog = catalog;
  }

  public getItems(): IProductItem[] {
    return this.catalog.filter(product => this.basket.includes(product.id));
  }
  
  public remove(id: UUID): void {
    this.basket = this.basket.filter(itemId => itemId !== id);
    this.update();
  }
}

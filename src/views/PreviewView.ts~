import { IProductItem } from '../types';
import { IView } from '../interfaces/IView';

export class PreviewView implements IView<IProductItem> {
  private template: HTMLTemplateElement;
  private container: HTMLElement;
  private modal: HTMLElement;

  constructor(templateSelector: string, containerSelector: string) {
    const templateEl = document.querySelector(templateSelector);
    const containerEl = document.querySelector(containerSelector);
    const modalEl = containerEl?.closest('.modal');

    if (!(templateEl instanceof HTMLTemplateElement)) {
      throw new Error(`Template '${templateSelector}' not found or not a <template>`);
    }
    if (!(containerEl instanceof HTMLElement)) {
      throw new Error(`Container '${containerSelector}' not found`);
    }
    if (!(modalEl instanceof HTMLElement)) {
      throw new Error(`Modal not found for container '${containerSelector}'`);
    }

    this.template = templateEl;
    this.container = containerEl;
    this.modal = modalEl;
  }

  public render(data: IProductItem): void {
    this.container.innerHTML = '';
    const card = this.template.content.cloneNode(true) as HTMLElement;

    (card.querySelector('.card__title') as HTMLElement).textContent = data.title;
    (card.querySelector('.card__text') as HTMLElement).textContent = data.description;
    (card.querySelector('.card__category') as HTMLElement).textContent = data.category;
    (card.querySelector('.card__price') as HTMLElement).textContent = data.price ? `${data.price} синапсов` : 'Бесценно';

    const image = card.querySelector('.card__image') as HTMLImageElement;
    image.src = new URL(`/static/${data.image.replace(/^\/+/, '')}`, process.env.API_ORIGIN).toString();
    image.alt = data.title;

    (card.querySelector('.card__button') as HTMLButtonElement).setAttribute('data-id', data.id);

    this.container.appendChild(card);
    this.modal.classList.add('modal_active');
  }
}

public close(): void {
  this.modal.classList.remove('modal_active');
}
}